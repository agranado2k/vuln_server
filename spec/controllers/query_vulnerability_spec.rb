# frozen_string_literal: true

require 'rails_helper'

RSpec.describe VulnerabilitiesController, type: :controller do
  render_views

  context "when quering without the required params" do
    let(:error_list) do
      { validation_errors:
        [
          { group_id: 'required' },
          { artifact_id: 'required' },
          { version: 'required' }
        ]
      }
    end
    before { get :index, params: { } }

    it "returns HTTP status 400" do
      expect(response).to have_http_status :bad_request
    end

    it "response with validation error list" do
      expect(JSON.parse(response.body).to_json).to eq(error_list.to_json)
    end
  end

  context "when quering a package that has vulnerabilities" do
    let(:group_id) { 'com.example.my_group' }
    let(:artifact_id) { 'my_package' }
    let(:version) { '1.0.0' }
    let(:vuln_list) do
      [
        { rank: 'M', name: 'Improper Authentication', package: "#{group_id}:#{artifact_id}:#{version}" }
      ]
    end
    before { get :index, params: { group_id: group_id, artifact_id: artifact_id, version: version } }

    it "returns HTTP status 200" do
        expect(response).to have_http_status :ok
    end

    it "vulnerability list" do
      expect(JSON.parse(response.body).to_json).to eq(vuln_list.to_json)
    end
  end

  context "when quering a package that DOES NOT have vulnerabilities" do
    let(:group_id) { 'com.example.my_group' }
    let(:artifact_id) { 'other_package' }
    let(:version) { '1.0.0' }
    let(:vuln_list) { [] }
    before { get :index, params: { group_id: group_id, artifact_id: artifact_id, version: version } }

    it "returns HTTP status 200" do
        expect(response).to have_http_status :ok
    end

    it "empty list" do
      expect(JSON.parse(response.body)).to eq(vuln_list)
    end
  end
end
